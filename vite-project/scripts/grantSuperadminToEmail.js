#!/usr/bin/env node

/**
 * Script para otorgar privilegios de SUPER_ADMIN a un usuario espec√≠fico por email
 * Uso: node grantSuperadminToEmail.js <email>
 * 
 * IMPORTANTE: El usuario debe haber iniciado sesi√≥n al menos una vez en la aplicaci√≥n
 * para que su registro exista en Firestore.
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, collection, query, where, getDocs, updateDoc, doc } = require('firebase/firestore');

const firebaseConfig = {
  apiKey: "AIzaSyAXA9BLlrQ5L88E2yFlGRYUyj404Npz074",
  authDomain: "titulo-26999.firebaseapp.com",
  projectId: "titulo-26999",
  storageBucket: "titulo-26999.firebasestorage.app",
  messagingSenderId: "456678500203",
  appId: "1:456678500203:web:e788c386920b84155e8e2e",
  measurementId: "G-TMGEBM8PY9"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function grantSuperAdmin(userEmail) {
  try {
    console.log('üîê ===== OTORGANDO PRIVILEGIOS DE SUPER_ADMIN =====');
    console.log(`üìß Email del usuario: ${userEmail}`);
    console.log('');
    console.log('üîç Buscando usuario en Firestore...');
    
    // Buscar usuario por email
    const usersRef = collection(db, 'users');
    const q = query(usersRef, where('email', '==', userEmail));
    const querySnapshot = await getDocs(q);
    
    if (querySnapshot.empty) {
      console.log('');
      console.log('‚ùå ¬°ERROR! Usuario no encontrado en la base de datos.');
      console.log('');
      console.log('üí° Para resolver este problema:');
      console.log('   1. El usuario debe visitar la aplicaci√≥n');
      console.log('   2. Iniciar sesi√≥n con su cuenta de Google');
      console.log('   3. Una vez creada la cuenta, ejecutar este script nuevamente');
      console.log('');
      console.log('‚ö†Ô∏è  El usuario DEBE iniciar sesi√≥n al menos una vez antes de asignar roles.');
      process.exit(1);
    }
    
    // Obtener informaci√≥n del usuario
    const userDoc = querySnapshot.docs[0];
    const userData = userDoc.data();
    const userId = userDoc.id;
    
    console.log('‚úÖ Usuario encontrado!');
    console.log('');
    console.log('üìã Informaci√≥n actual del usuario:');
    console.log(`   - Nombre: ${userData.displayName || 'Sin nombre'}`);
    console.log(`   - Email: ${userData.email}`);
    console.log(`   - Rol actual: ${userData.role || 'Sin rol asignado'}`);
    console.log(`   - Estado: ${userData.isActive ? 'Activo' : 'Inactivo'}`);
    console.log(`   - UID: ${userId}`);
    console.log('');
    
    // Actualizar el rol a SUPER_ADMIN
    console.log('üîÑ Actualizando rol a SUPER_ADMIN...');
    const userRef = doc(db, 'users', userId);
    
    await updateDoc(userRef, {
      role: 'super_admin',
      isActive: true, // Asegurar que el usuario est√© activo
      updatedAt: new Date()
    });
    
    console.log('');
    console.log('‚úÖ ¬°√âXITO! Privilegios de SUPER_ADMIN otorgados correctamente');
    console.log('');
    console.log('üìã Nueva configuraci√≥n del usuario:');
    console.log(`   - Nombre: ${userData.displayName || 'Sin nombre'}`);
    console.log(`   - Email: ${userData.email}`);
    console.log(`   - Rol: SUPER_ADMIN`);
    console.log(`   - Estado: Activo`);
    console.log('');
    console.log('üîê Permisos otorgados:');
    console.log('   ‚úì Acceso completo al sistema');
    console.log('   ‚úì Gesti√≥n de usuarios y roles');
    console.log('   ‚úì Configuraci√≥n del sistema');
    console.log('   ‚úì Acceso a todas las secciones');
    console.log('   ‚úì Importaci√≥n/exportaci√≥n de datos');
    console.log('   ‚úì Gesti√≥n del ciclo de vida de pr√°cticas');
    console.log('   ‚úì An√°lisis avanzado y reportes');
    console.log('');
    console.log('üîÑ IMPORTANTE: El usuario debe:');
    console.log('   1. Cerrar sesi√≥n en la aplicaci√≥n (si est√° conectado)');
    console.log('   2. Volver a iniciar sesi√≥n');
    console.log('   3. Refrescar la p√°gina (F5)');
    console.log('');
    console.log('üéâ ¬°Proceso completado exitosamente!');
    
  } catch (error) {
    console.error('');
    console.error('‚ùå ERROR al otorgar privilegios:', error.message);
    console.error('');
    
    if (error.code === 'permission-denied') {
      console.error('‚ö†Ô∏è  Error de permisos. Verifica que:');
      console.error('   - Las credenciales de Firebase sean correctas');
      console.error('   - Las reglas de Firestore permitan esta operaci√≥n');
    }
    
    process.exit(1);
  }
}

// Validar argumentos de l√≠nea de comandos
const userEmail = process.argv[2];

if (!userEmail) {
  console.log('');
  console.log('üìß USO DEL SCRIPT');
  console.log('================');
  console.log('');
  console.log('node grantSuperadminToEmail.js <email>');
  console.log('');
  console.log('EJEMPLO:');
  console.log('  node grantSuperadminToEmail.js marayad@utem.cl');
  console.log('');
  process.exit(1);
}

// Validar formato de email
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
if (!emailRegex.test(userEmail)) {
  console.log('');
  console.log('‚ùå ERROR: Formato de email inv√°lido');
  console.log('');
  console.log('Por favor, proporciona un email v√°lido.');
  console.log('Ejemplo: usuario@utem.cl');
  console.log('');
  process.exit(1);
}

// Ejecutar la funci√≥n
grantSuperAdmin(userEmail).then(() => {
  process.exit(0);
}).catch((error) => {
  console.error('Error fatal:', error);
  process.exit(1);
});
